dtmc

const int column1 = 1;
const int column2 = 2;
const int column3 = 3;
const int column4 = 4;

const int dec = 1;
const int pt = 100;

global p : [0..100] init 100;

global q1x : [1..4] init 1;
global q1y : [1..4] init 1;
global q2x : [1..4] init 2;
global q2y : [1..4] init 2;
global q3x : [1..4] init 3;
global q3y : [1..4] init 3;
global q4x : [1..4] init 4;
global q4y : [1..4] init 4;

module q1

	// if all are less attacked than current
	[] current_queen_under_attack & case_all_less -> 0.33: (q1x' = q2x) & (q2x' = q1x) & (p' = p - dec) + .33: (q1x' = q3x) & (q3x' = q1x) & (p' = p - dec) + .34: (q1x' = q4x) & (q4x' = q1x) & (p' = p - dec);
	// if all are more attacked than current
	//[] current_queen_under_attack & case_all_more -> p/pt*0.33: (q1x' = q2x) & (q2x' = q1x) & (p' = p - dec) + p/pt*.33: (q1x' = q3x) & (q3x' = q1x) & (p' = p - dec) + p/pt*.34: (q1x' = q4x) & (q4x' = q1x) & (p' = p - dec);
	[] current_queen_under_attack & case_all_more -> 0.33: (q1x' = q2x) & (q2x' = q1x) & (p' = p - dec) + .33: (q1x' = q3x) & (q3x' = q1x) & (p' = p - dec) + .34: (q1x' = q4x) & (q4x' = q1x) & (p' = p - dec);	

	// if all are more attacked than current but c1
	[] current_queen_under_attack & case_all_more_but_c1 & (q1x != column1) & (q2x = column1) -> 1: (q1x' = q2x) & (q2x' = q1x) & (p' = p - dec);
	[] current_queen_under_attack & case_all_more_but_c1 & (q1x != column1) & (q3x = column1) -> 1: (q1x' = q3x) & (q3x' = q1x) & (p' = p - dec);
	[] current_queen_under_attack & case_all_more_but_c1 & (q1x != column1) & (q4x = column1) -> 1: (q1x' = q4x) & (q4x' = q1x) & (p' = p - dec);
	// if all are more attacked than current but c2
	[] current_queen_under_attack & case_all_more_but_c2 & (q1x != column2) & (q2x = column2) -> 1: (q1x' = q2x) & (q2x' = q1x) & (p' = p - dec);
	[] current_queen_under_attack & case_all_more_but_c2 & (q1x != column2) & (q3x = column2) -> 1: (q1x' = q3x) & (q3x' = q1x) & (p' = p - dec);
	[] current_queen_under_attack & case_all_more_but_c2 & (q1x != column2) & (q4x = column2) -> 1: (q1x' = q4x) & (q4x' = q1x) & (p' = p - dec);
	// if all are more attacked than current but c3
	[] current_queen_under_attack & case_all_more_but_c3 & (q1x != column3) & (q2x = column3) -> 1: (q1x' = q2x) & (q2x' = q1x) & (p' = p - dec);
	[] current_queen_under_attack & case_all_more_but_c3 & (q1x != column3) & (q3x = column3) -> 1: (q1x' = q3x) & (q3x' = q1x) & (p' = p - dec);
	[] current_queen_under_attack & case_all_more_but_c3 & (q1x != column3) & (q4x = column3) -> 1: (q1x' = q4x) & (q4x' = q1x) & (p' = p - dec);
	// if all are more attacked than current but c4
	[] current_queen_under_attack & case_all_more_but_c4 & (q1x != column4) & (q2x = column3) -> 1: (q1x' = q2x) & (q2x' = q1x) & (p' = p - dec);
	[] current_queen_under_attack & case_all_more_but_c4 & (q1x != column4) & (q3x = column3) -> 1: (q1x' = q3x) & (q3x' = q1x) & (p' = p - dec);
	[] current_queen_under_attack & case_all_more_but_c4 & (q1x != column4) & (q4x = column3) -> 1: (q1x' = q4x) & (q4x' = q1x) & (p' = p - dec);

	// if all are more attacked than current but c1 c2
	[] current_queen_under_attack & case_all_more_but_c1_c2 & (q1x != column1 | q1x != column2) & (q2x = column1 | q2x = column2) & (q3x = column1 | q3x = column2) -> .5: (q1x' = q2x) & (q2x' = q1x) & (p' = p - dec) + .5: (q1x' = q3x) & (q3x' = q1x) & (p' = p - dec);
	[] current_queen_under_attack & case_all_more_but_c1_c2 & (q1x != column1 | q1x != column2) & (q2x = column1 | q2x = column2) & (q4x = column1 | q4x = column2) -> .5: (q1x' = q2x) & (q2x' = q1x) & (p' = p - dec) + .5: (q1x' = q4x) & (q4x' = q1x) & (p' = p - dec);
	[] current_queen_under_attack & case_all_more_but_c1_c2 & (q1x != column1 | q1x != column2) & (q3x = column1 | q3x = column2) & (q4x = column1 | q4x = column2) -> .5: (q1x' = q3x) & (q3x' = q1x) & (p' = p - dec) + .5: (q1x' = q3x) & (q3x' = q1x) & (p' = p - dec);
	// if all are more attacked than current but c1 c3
	[] current_queen_under_attack & case_all_more_but_c1_c3 & (q1x != column1 | q1x != column3) & (q2x = column1 | q2x = column3) & (q3x = column1 | q3x = column3) -> .5: (q1x' = q2x) & (q2x' = q1x) & (p' = p - dec) + .5: (q1x' = q3x) & (q3x' = q1x) & (p' = p - dec);
	[] current_queen_under_attack & case_all_more_but_c1_c3 & (q1x != column1 | q1x != column3) & (q2x = column1 | q2x = column3) & (q4x = column1 | q4x = column3) -> .5: (q1x' = q2x) & (q2x' = q1x) & (p' = p - dec) + .5: (q1x' = q4x) & (q4x' = q1x) & (p' = p - dec);
	[] current_queen_under_attack & case_all_more_but_c1_c3 & (q1x != column1 | q1x != column3) & (q3x = column1 | q3x = column3) & (q4x = column1 | q4x = column3) -> .5: (q1x' = q3x) & (q3x' = q1x) & (p' = p - dec) + .5: (q1x' = q4x) & (q4x' = q1x) & (p' = p - dec);
	// if all are more attacked than current but c1 c4
	[] current_queen_under_attack & case_all_more_but_c1_c4 & (q1x != column1 | q1x != column4) & (q2x = column1 | q2x = column4) & (q3x = column1 | q3x = column4) -> .5: (q1x' = q2x) & (q2x' = q1x) & (p' = p - dec) + .5: (q1x' = q3x) & (q3x' = q1x) & (p' = p - dec);
	[] current_queen_under_attack & case_all_more_but_c1_c4 & (q1x != column1 | q1x != column4) & (q2x = column1 | q2x = column4) & (q4x = column1 | q4x = column4) -> .5: (q1x' = q2x) & (q2x' = q1x) & (p' = p - dec) + .5: (q1x' = q4x) & (q4x' = q1x) & (p' = p - dec);
	[] current_queen_under_attack & case_all_more_but_c1_c4 & (q1x != column1 | q1x != column4) & (q3x = column1 | q3x = column4) & (q4x = column1 | q4x = column4) -> .5: (q1x' = q3x) & (q3x' = q1x) & (p' = p - dec) + .5: (q1x' = q4x) & (q4x' = q1x) & (p' = p - dec);
	// if all are more attacked than current but c2 c3
	[] current_queen_under_attack & case_all_more_but_c2_c3 & (q1x != column2 | q1x != column3) & (q2x = column2 | q2x = column3) & (q3x = column2 | q3x = column3) -> .5: (q1x' = q2x) & (q2x' = q1x) & (p' = p - dec) + .5: (q1x' = q3x) & (q3x' = q1x) & (p' = p - dec);
	[] current_queen_under_attack & case_all_more_but_c2_c3 & (q1x != column2 | q1x != column3) & (q2x = column2 | q2x = column3) & (q4x = column2 | q4x = column3) -> .5: (q1x' = q2x) & (q2x' = q1x) & (p' = p - dec) + .5: (q1x' = q4x) & (q4x' = q1x) & (p' = p - dec);
	[] current_queen_under_attack & case_all_more_but_c2_c3 & (q1x != column2 | q1x != column3) & (q3x = column2 | q3x = column3) & (q4x = column2 | q4x = column3) -> .5: (q1x' = q3x) & (q3x' = q1x) & (p' = p - dec) + .5: (q1x' = q4x) & (q4x' = q1x) & (p' = p - dec);
	// if all are more attacked than current but c2 c4
	[] current_queen_under_attack & case_all_more_but_c2_c4 & (q1x != column2 | q1x != column4) & (q2x = column2 | q2x = column4) & (q3x = column2 | q3x = column4) -> .5: (q1x' = q2x) & (q2x' = q1x) & (p' = p - dec) + .5: (q1x' = q3x) & (q3x' = q1x) & (p' = p - dec);
	[] current_queen_under_attack & case_all_more_but_c2_c4 & (q1x != column2 | q1x != column4) & (q2x = column2 | q2x = column4) & (q4x = column2 | q4x = column4) -> .5: (q1x' = q2x) & (q2x' = q1x) & (p' = p - dec) + .5: (q1x' = q4x) & (q4x' = q1x) & (p' = p - dec);
	[] current_queen_under_attack & case_all_more_but_c2_c4 & (q1x != column2 | q1x != column4) & (q3x = column2 | q3x = column4) & (q4x = column2 | q4x = column4) -> .5: (q1x' = q3x) & (q3x' = q1x) & (p' = p - dec) + .5: (q1x' = q4x) & (q4x' = q1x)& (p' = p - dec);
	// if all are more attacked than current but c3 c4
	[] current_queen_under_attack & case_all_more_but_c3_c4 & (q1x != column3 | q1x != column4) & (q2x = column3 | q2x = column4) & (q3x = column3 | q3x = column4) -> .5: (q1x' = q2x) & (q2x' = q1x) & (p' = p - dec) + .5: (q1x' = q3x) & (q3x' = q1x) & (p' = p - dec);
	[] current_queen_under_attack & case_all_more_but_c3_c4 & (q1x != column3 | q1x != column4) & (q2x = column3 | q2x = column4) & (q4x = column3 | q4x = column4) -> .5: (q1x' = q2x) & (q2x' = q1x) & (p' = p - dec) + .5: (q1x' = q4x) & (q4x' = q1x) & (p' = p - dec);
	[] current_queen_under_attack & case_all_more_but_c3_c4 & (q1x != column3 | q1x != column4) & (q3x = column3 | q3x = column4) & (q4x = column3 | q4x = column4) -> .5: (q1x' = q3x) & (q3x' = q1x) & (p' = p - dec) + .5: (q1x' = q4x) & (q4x' = q1x) & (p' = p - dec);

	// if all are more attacked than current but c1 c2 c3
	[] current_queen_under_attack & case_all_more_but_c1_c2_c3 & (q1x != column1 | q1x != column2 | q1x != column3) & (q2x = column1 | q2x = column2 | q2x = column3) & (q3x = column1 | q3x = column2 | q3x = column3) & (q4x = column1 | q4x = column2 | q4x = column3) -> .33: (q1x' = q2x) & (q2x' = q1x) & (p' = p - dec) + .33: (q1x' = q3x) & (q3x' = q1x) & (p' = p - dec) + .34: (q1x' = q4x) & (q4x' = q1x) & (p' = p - dec);
	// if all are more attacked than current but c1 c2 c4
	[] current_queen_under_attack & case_all_more_but_c1_c2_c4 & (q1x != column1 | q1x != column2 | q1x != column4) & (q2x = column1 | q2x = column2 | q2x = column4) & (q3x = column1 | q3x = column2 | q3x = column4) & (q4x = column1 | q4x = column2 | q4x = column3) -> .33: (q1x' = q2x) & (q2x' = q1x) & (p' = p - dec) + .33: (q1x' = q3x) & (q3x' = q1x) & (p' = p - dec) + .34: (q1x' = q4x) & (q4x' = q1x) & (p' = p - dec);
	// if all are more attacked than current but c2 c3 c4
	[] current_queen_under_attack & case_all_more_but_c2_c3_c4 & (q1x != column2 | q1x != column3 | q1x != column4) & (q2x = column2 | q2x = column3 | q2x = column4) & (q3x = column2 | q3x = column3 | q3x = column4) & (q4x = column2 | q4x = column3 | q4x = column4) -> .33: (q1x' = q2x) & (q2x' = q1x) & (p' = p - dec) + .33: (q1x' = q3x) & (q3x' = q1x) & (p' = p - dec) + .34: (q1x' = q4x) & (q4x' = q1x) & (p' = p - dec);
	// if all are more attacked than current but c1 c3 c4
	[] current_queen_under_attack & case_all_more_but_c1_c3_c4 & (q1x != column1 | q1x != column3 | q1x != column4) & (q2x = column1 | q2x = column3 | q2x = column4) & (q3x = column1 | q3x = column3 | q3x =column4) & (q4x = column1 | q4x = column3 | q4x = column4) -> .33: (q1x' = q2x) & (q2x' = q1x) & (p' = p - dec) + .33: (q1x' = q3x) & (q3x' = q1x) & (p' = p - dec) + .34: (q1x' = q4x) & (q4x' = q1x) & (p' = p - dec);
	
endmodule

// if under attack at all
formula current_queen_under_attack = ((q1x-q2x) = (q1y-q2y) | (q1x-q2x) = -(q1y-q2y)) | ((q1x-q3x) = (q1y-q3y) | (q1x-q3x) = -(q1y-q3y)) |  ((q1x-q4x) = (q1y-q4y) | (q1x-q4x) = -(q1y-q4y));

// find how many queens are attacking
formula current_queen_under_attack_from_q2 = ((q1x-q2x) = (q1y-q2y) | (q1x-q2x) = -(q1y-q2y));
formula current_queen_under_attack_from_q3 = ((q1x-q3x) = (q1y-q3y) | (q1x-q3x) = -(q1y-q3y));
formula current_queen_under_attack_from_q4 = ((q1x-q4x) = (q1y-q4y) | (q1x-q4x) = -(q1y-q4y));
formula number_attacking_current_queen = (current_queen_under_attack_from_q2=true?1:0)  + (current_queen_under_attack_from_q3=true?1:0) + (current_queen_under_attack_from_q4=true?1:0);

// find how many queens are attacking position 1
formula position1_under_attack_from_q2 = ((column1-q2x) = (column1-q2y) | (column1-q2x) = -(column1-q2y));
formula position1_under_attack_from_q3 = ((column1-q3x) = (column1-q3y) | (column1-q3x) = -(column1-q3y));
formula position1_under_attack_from_q4 = ((column1-q4x) = (column1-q4y) | (column1-q4x) = -(column1-q4y));
formula number_attacking_position1 = (position1_under_attack_from_q2=true?1:0) + (position1_under_attack_from_q3=true?1:0) + (position1_under_attack_from_q4=true?1:0);

// find how many queens are attacking position 2
formula position2_under_attack_from_q2 = ((column2-q2x) = (column2-q2y) | (column2-q2x) = -(column2-q2y));
formula position2_under_attack_from_q3 = ((column2-q3x) = (column2-q3y) | (column2-q3x) = -(column2-q3y));
formula position2_under_attack_from_q4 = ((column2-q4x) = (column2-q4y) | (column2-q4x) = -(column2-q4y));
formula number_attacking_position2 = (position2_under_attack_from_q2=true?1:0) + (position2_under_attack_from_q3=true?1:0) + (position2_under_attack_from_q4=true?1:0);

// find how many queens are attacking position 3
formula position3_under_attack_from_q2 = ((column3-q2x) = (column3-q2y) | (column3-q2x) = -(column3-q2y));
formula position3_under_attack_from_q3 = ((column3-q3x) = (column3-q3y) | (column3-q3x) = -(column3-q3y));
formula position3_under_attack_from_q4 = ((column3-q4x) = (column3-q4y) | (column3-q4x) = -(column3-q4y));
formula number_attacking_positions3 = (position2_under_attack_from_q2=true?1:0) + (position2_under_attack_from_q3=true?1:0) + (position2_under_attack_from_q4=true?1:0);

// find how many queens are attacking position 4
formula position4_under_attack_from_q2 = ((column4-q2x) = (column4-q2y) | (column4-q2x) = -(column4-q2y));
formula position4_under_attack_from_q3 = ((column4-q3x) = (column4-q3y) | (column4-q3x) = -(column4-q3y));
formula position4_under_attack_from_q4 = ((column4-q4x) = (column4-q4y) | (column4-q4x) = -(column4-q4y));
formula number_attacking_position4 = (position4_under_attack_from_q2=true?1:0) + (position4_under_attack_from_q3=true?1:0) + (position4_under_attack_from_q4=true?1:0);

// case when all positions are less attacked than current 
formula case_all_less = (number_attacking_current_queen > number_attacking_position1) & (number_attacking_current_queen > number_attacking_position2) & (number_attacking_current_queen > number_attacking_positions3) & (number_attacking_current_queen > number_attacking_position4);

// case when all positions are more (or equal) attacked than current
formula case_all_more = (number_attacking_current_queen <= number_attacking_position1) & (number_attacking_current_queen <= number_attacking_position2) & (number_attacking_current_queen <= number_attacking_positions3) & (number_attacking_current_queen <= number_attacking_position4);

// cases when all positions but 1 are more (or equal) attacked than current
formula case_all_more_but_c1 = (number_attacking_current_queen > number_attacking_position1) & (number_attacking_current_queen <= number_attacking_position2) & (number_attacking_current_queen <= number_attacking_positions3) & (number_attacking_current_queen <= number_attacking_position4);
formula case_all_more_but_c2 = (number_attacking_current_queen <= number_attacking_position1) & (number_attacking_current_queen > number_attacking_position2) & (number_attacking_current_queen <= number_attacking_positions3) & (number_attacking_current_queen <= number_attacking_position4);
formula case_all_more_but_c3 = (number_attacking_current_queen <= number_attacking_position1) & (number_attacking_current_queen <= number_attacking_position2) & (number_attacking_current_queen > number_attacking_positions3) & (number_attacking_current_queen <= number_attacking_position4);
formula case_all_more_but_c4 = (number_attacking_current_queen <= number_attacking_position1) & (number_attacking_current_queen <= number_attacking_position2) & (number_attacking_current_queen <= number_attacking_positions3) & (number_attacking_current_queen > number_attacking_position4);

// cases when all positions but 2 are more (or equal) attacked than current
formula case_all_more_but_c1_c2 = (number_attacking_current_queen > number_attacking_position1) & (number_attacking_current_queen > number_attacking_position2) & (number_attacking_current_queen <= number_attacking_positions3) & (number_attacking_current_queen <= number_attacking_position4);
formula case_all_more_but_c1_c3 = (number_attacking_current_queen > number_attacking_position1) & (number_attacking_current_queen <= number_attacking_position2) & (number_attacking_current_queen > number_attacking_positions3) & (number_attacking_current_queen <= number_attacking_position4);
formula case_all_more_but_c1_c4 = (number_attacking_current_queen > number_attacking_position1) & (number_attacking_current_queen <= number_attacking_position2) & (number_attacking_current_queen <= number_attacking_positions3) & (number_attacking_current_queen > number_attacking_position4);
formula case_all_more_but_c2_c3 = (number_attacking_current_queen <= number_attacking_position1) & (number_attacking_current_queen > number_attacking_position2) & (number_attacking_current_queen > number_attacking_positions3) & (number_attacking_current_queen <= number_attacking_position4);
formula case_all_more_but_c2_c4 = (number_attacking_current_queen <= number_attacking_position1) & (number_attacking_current_queen > number_attacking_position2) & (number_attacking_current_queen <= number_attacking_positions3) & (number_attacking_current_queen > number_attacking_position4);
formula case_all_more_but_c3_c4 = (number_attacking_current_queen <= number_attacking_position1) & (number_attacking_current_queen <= number_attacking_position2) & (number_attacking_current_queen > number_attacking_positions3) & (number_attacking_current_queen > number_attacking_position4);

// cases when all positions but 3 are more (or equal) attacked than current
formula case_all_more_but_c1_c2_c3 = (number_attacking_current_queen > number_attacking_position1) & (number_attacking_current_queen > number_attacking_position2) & (number_attacking_current_queen > number_attacking_positions3) & (number_attacking_current_queen <= number_attacking_position4);
formula case_all_more_but_c1_c2_c4 = (number_attacking_current_queen > number_attacking_position1) & (number_attacking_current_queen > number_attacking_position2) & (number_attacking_current_queen <= number_attacking_positions3) & (number_attacking_current_queen > number_attacking_position4);
formula case_all_more_but_c2_c3_c4 = (number_attacking_current_queen <= number_attacking_position1) & (number_attacking_current_queen > number_attacking_position2) & (number_attacking_current_queen > number_attacking_positions3) & (number_attacking_current_queen > number_attacking_position4);
formula case_all_more_but_c1_c3_c4 = (number_attacking_current_queen > number_attacking_position1) & (number_attacking_current_queen <= number_attacking_position2) & (number_attacking_current_queen > number_attacking_positions3) & (number_attacking_current_queen > number_attacking_position4);

// make additional modules
module q2 = q1 [ q1x=q2x, q2x=q1x, q1y=q2y, q2y=q1y ] endmodule
module q3 = q1 [ q1x=q3x, q3x=q1x, q1y=q3y, q3y=q1y ] endmodule
module q4 = q1 [ q1x=q4x, q4x=q1x, q1y=q4y, q4y=q1y ] endmodule

